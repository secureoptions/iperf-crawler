---
AWSTemplateFormatVersion: '2010-09-09'
Description: Iperf-Crawler will deploy servers and test throughput between any two
  subnets tagged to a group.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Parameters:
      - Type
      - MtrCommand
      - IperfCommand
    ParameterLabels:
      Type:
        default: Instance Type
      MtrCommand:
        default: MTR Options
      IperfCommand:
        default: Iperf3 Options
Parameters:
  Type:
    Description: Choose the instance type that you want to use to run the iperf3 tests
      between. See instance types and their network capabilities here https://aws.amazon.com/ec2/instance-types/
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - x1e.32xlarge
    - x1e.16xlarge
    - x1e.8xlarge
    - x1e.4xlarge
    - x1e.2xlarge
    - x1e.xlarge
    - x1.32xlarge
    - x1.16xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - f1.2xlarge
    - f1.16xlarge
    - g3.4xlarge
    - g3.8xlarge
    - g3.16xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - h1.2xlarge
    - h1.4xlarge
    - h1.8xlarge
    - h1.16xlarge
    Type: String
  MtrCommand:
    Description: Specify the mtr commmand and optional flags you want to automate
      tests with. Do NOT include the target IP or hostname in the command. The target
      will automatically be selected during tests.
    Type: String
    Default: mtr -r -n -c 10
    AllowedPattern: mtr.*
  IperfCommand:
    Description: Specify the iperf3 (not iperf) command and optional flags you want
      to automate tests with. Do NOT include the target IP or hostname in the command.
      The target will automatically be selected during tests.
    Type: String
    Default: iperf3 -c
    AllowedPattern: iperf3.*
  Accounts:
    Description: (Optional) Specify a comma-separated list of one or more AWS account ids that you wish to run iperf3 worker EC2(s) in. You DO NOT have to include this AWS account id in the list. If you do not have any additional accounts, leave the default value of '000000000000'
    Type: String
    Default: '000000000000'
    AllowedPattern: '([0-9]{12}\s?,?\s?)*'
    ConstraintDescription: You must provide at least one additional account number in the form of xxxxxxxxxxxx, or specify 000000000000 if you do not have any additional accounts

Resources: 
    LambdaIamPolicy:
        Type: "AWS::IAM::Policy"
        Properties: 
          PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "ec2:DescribeRegions"
                  - "ec2:DescribeSubnets"
                  - "ec2:CreateSecurityGroup"
                  - "ec2:RunInstances"
                  - "ec2:TerminateInstances"
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                  - "ec2:DescribeInstances"
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:DeleteTags"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "events:DisableRule"
                  - "sdb:GetAttributes"
                  - "sdb:PutAttributes"
                  - "sdb:Select"
                  - "sdb:DeleteAttributes"
                  - "sdb:CreateDomain"
                  - "sdb:DeleteDomain"
                  - "states:CreateActivity"
                  - "states:CreateStateMachine"
                  - "states:DeleteStateMachine"
                  - "states:DeleteActivity"
                  - "states:DescribeExecution"
                  - "states:StopExecution"
                  - "iam:PassRole"
                  - "sts:AssumeRole"
                  - "sts:GetCallerIdentity"
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: IperfCrawlerPermissions
          Roles: 
            - Ref: LambdaRole
    Ec2IamPolicy:
        Type: AWS::IAM::Policy
        Properties:
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:AuthorizeSecurityGroupIngress
              - states:GetActivityTask
              - states:StartExecution
              - states:SendTaskFailure
              - states:SendTaskSuccess
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              - sdb:GetAttributes
              - sdb:PutAttributes
              Resource: "*"
          PolicyName: IperfCrawlerEc2
          Roles:
          - Ref: Ec2Role
    LambdaRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
          Path: "/"
    Ec2Role:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
                AWS: "*"
              Action: sts:AssumeRole
          Path: "/"
          RoleName: IperfCrawlerEc2
    Ec2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: "/"
          Roles:
          - Ref: Ec2Role
          InstanceProfileName: IperfCrawlerEc2
         
    IperfCrawlerLambda:
        Type: AWS::Lambda::Function
        Properties:
          Code:
            S3Bucket:
              Fn::Join:
              - "-"
              - - iperf-crawler
                - Ref: AWS::Region
            S3Key: iperf-crawler.zip
          Description: IperfCrawler will poll tagged subnets, and launch EC2s in them to run iperf3 tests
          Environment:
            Variables:
              INSTANCE_PROFILE:
                Fn::GetAtt:
                - Ec2InstanceProfile
                - Arn
              IPERF_FLAGS:
                Ref: IperfCommand
              MTR_FLAGS:
                Ref: MtrCommand
              REGION:
                Ref: AWS::Region
              TYPE:
                Ref: Type
              STATES_EXECUTION_ROLE:
                Fn::GetAtt:
                - StatesExecutionRole
                - Arn
              ACCOUNTS:
                Ref: Accounts
          FunctionName: IperfCrawler
          Handler: iperf-crawler.lambda_handler
          Role: 
            Fn::GetAtt:
            - LambdaRole
            - Arn
          Runtime: python2.7
          Timeout: 180        
    LambdaRule:
      Type: AWS::Events::Rule
      Properties:
        Description: Used to trigger Parallax poller/launcher every minute
        Name: Parallax1Minute
        ScheduleExpression: rate(1 minute)
        State: ENABLED
        Targets:
        - Id: ParallaxScheduler
          Arn:
            Fn::GetAtt:
            - IperfCrawlerLambda
            - Arn
    LambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
          - IperfCrawlerLambda
          - Arn
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn:
          Fn::GetAtt:
          - LambdaRule
          - Arn
          
    StatesExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: StatesExecutionPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
    IperfResults:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: Iperf-Crawler
        
    CleanUp:
      Type: Custom::CleanUpEnvironment
      DependsOn: CleanUpLambda
      Properties:
        ServiceToken:
          Fn::GetAtt:
          - CleanUpLambda
          - Arn
          
    CleanUpLambda:
        Type: AWS::Lambda::Function
        Properties:
          Code:
            S3Bucket:
              Fn::Join:
              - "-"
              - - iperf-crawler
                - Ref: AWS::Region
            S3Key: iperf-crawler.zip
          Description: IperfCrawler function to cleanup environment if Cloudformation stack is deleted
          FunctionName: IperfCrawlerCleanUp
          Handler: cleanup.lambda_handler
          Role: 
            Fn::GetAtt:
            - LambdaRole
            - Arn
          Runtime: python2.7
          Timeout: 180
